name: Auto unassign inactive assignees

on:
  schedule:
    - cron: "30 0 * * *"  # daily at ~06:00 IST
  workflow_dispatch: {}

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  sweep:
    runs-on: ubuntu-latest
    steps:
      - name: Unassign inactive assignees after 7 days and label
        uses: actions/github-script@v7
        with:
          script: |
            const DAYS = 7; // tweak if needed
            const INACTIVITY_LABEL = "inactivity";
            const cutoff = new Date(Date.now() - DAYS*24*60*60*1000);

            async function ensureLabel() {
              try {
                await github.rest.issues.getLabel({
                  owner: context.repo.owner, repo: context.repo.repo, name: INACTIVITY_LABEL
                });
              } catch {
                await github.rest.issues.createLabel({
                  owner: context.repo.owner, repo: context.repo.repo,
                  name: INACTIVITY_LABEL, color: "b60205",
                  description: "Auto: unassigned for inactivity"
                });
              }
            }

            async function isActive(issueNumber, assigneeLogin, isPR) {
              // Comments by the assignee
              const comments = await github.paginate(github.rest.issues.listComments, {
                owner: context.repo.owner, repo: context.repo.repo, issue_number: issueNumber, per_page: 100
              });
              if (comments.some(c => c.user?.login?.toLowerCase() === assigneeLogin.toLowerCase() &&
                                     new Date(c.created_at) > cutoff)) return true;

              if (!isPR) return false;

              // PR-only: commits by the assignee
              const commits = await github.paginate(github.rest.pulls.listCommits, {
                owner: context.repo.owner, repo: context.repo.repo, pull_number: issueNumber, per_page: 100
              }).catch(() => []);
              if (commits.some(cm => cm.author?.login?.toLowerCase() === assigneeLogin.toLowerCase() &&
                                     new Date(cm.commit.author.date) > cutoff)) return true;

              // PR-only: reviews by the assignee
              const reviews = await github.paginate(github.rest.pulls.listReviews, {
                owner: context.repo.owner, repo: context.repo.repo, pull_number: issueNumber, per_page: 100
              }).catch(() => []);
              if (reviews.some(rv => rv.user?.login?.toLowerCase() === assigneeLogin.toLowerCase() &&
                                     new Date(rv.submitted_at) > cutoff)) return true;

              return false;
            }

            await ensureLabel();

            // All open issues & PRs
            const items = await github.paginate(github.rest.issues.listForRepo, {
              owner: context.repo.owner, repo: context.repo.repo,
              state: "open", per_page: 100
            });

            for (const item of items) {
              if (!item.assignees?.length) continue;

              const issueNumber = item.number;
              const isPR = Boolean(item.pull_request);
              const inactive = [];

              for (const a of item.assignees) {
                const active = await isActive(issueNumber, a.login, isPR);
                if (!active) inactive.push(a.login);
              }

              if (!inactive.length) continue;

              // Unassign inactive
              await github.rest.issues.removeAssignees({
                owner: context.repo.owner, repo: context.repo.repo, issue_number: issueNumber, assignees: inactive
              });

              // Add inactivity label if missing
              const existing = item.labels?.map(l => typeof l === "string" ? l : l.name) ?? [];
              if (!existing.includes(INACTIVITY_LABEL)) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner, repo: context.repo.repo, issue_number: issueNumber, labels: [INACTIVITY_LABEL]
                });
              }

              // Leave an audit comment
              const lines = [
                `Unassigned ${inactive.map(u => `@${u}`).join(", ")} due to no activity in the last ${DAYS} days.`,
                "> Tip: add a comment, review, or push a commit to be marked active again."
              ];
              await github.rest.issues.createComment({
                owner: context.repo.owner, repo: context.repo.repo, issue_number: issueNumber, body: lines.join("\n")
              });
            }
